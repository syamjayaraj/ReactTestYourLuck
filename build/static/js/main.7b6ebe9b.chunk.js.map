{"version":3,"sources":["components/Question.jsx","components/ResultModal.jsx","App.js","reportWebVitals.js","index.js"],"names":["Question","props","question","checkOption","Card","Body","Title","name","ListGroup","options","map","option","console","log","_id","selectedOption","Item","disabled","onClick","style","trueOption","border","borderRadius","className","correct","incorrect","testAgain","correctPercentage","incorrectPercentage","Modal","show","onHide","animation","Header","data","title","value","color","Footer","Button","variant","randomNumber","require","App","useState","questionsAndOptions","setQuestionsAndOptions","numberOfQuestions","numberOfOptions","numberOfAnsweredQuestions","setNumberOfAnsweredQuestions","numberOfCorrectAnswers","setNumberOfCorrectAnswers","useEffect","questionLorem","LoremIpsum","wordsPerSentence","max","min","optionLorem","questionsAndOptionsGenerated","Array","questionIndex","questionGenerated","generateSentences","slice","integer","optionsGenerated","optionIndex","createQuestionAndOptions","ResultModal","window","location","reload","Navbar","collapseOnSelect","expand","bg","fixed","Brand","href","Nav","Link","Container","questionId","optionId","updatedQuestionAndOptions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAoCeA,MAjCf,SAAkBC,GAAQ,IAClBC,EAA0BD,EAA1BC,SAAUC,EAAgBF,EAAhBE,YAChB,OACE,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,KAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UAAaJ,EAASK,OACtB,cAACC,EAAA,EAAD,UACGN,EAASO,QAAQC,KAAI,SAACC,GAErB,OADAC,QAAQC,IAAIF,EAAOG,IAAKZ,EAASa,gBAE/B,eAACP,EAAA,EAAUQ,KAAX,CACEC,WAAUf,EAASa,gBAAwB,KAC3CG,QAAS,kBAAMf,EAAYD,EAASY,IAAKH,EAAOG,MAChDK,MACEjB,EAASa,iBAAmBb,EAASkB,YACrCT,EAAOG,MAAQZ,EAASa,eACpB,CAAEM,OAAQ,oBAAqBC,aAAc,SAC7CpB,EAASa,iBAAmBb,EAASkB,YACrCT,EAAOG,MAAQZ,EAASa,eACxB,CAAEM,OAAQ,oBAAqBC,aAAc,SAC7C,KAVR,UAaE,qBAAKC,UAAU,SAAf,SAAyBZ,EAAOG,MAChC,8BAAMH,EAAOJ,qB,8CCiBdP,MAxCf,SAAkBC,GAAQ,IAClBuB,EAAkCvB,EAAlCuB,QAASC,EAAyBxB,EAAzBwB,UAAWC,EAAczB,EAAdyB,UACtBC,EAAqBH,EAAU,GAAM,IACrCI,EAAsB,IAAMD,EAEhC,OACE,eAACE,EAAA,EAAD,CAAOC,MAAM,EAAMC,OAAQL,EAAWM,WAAW,EAAjD,UACE,cAACH,EAAA,EAAMI,OAAP,UACE,eAACJ,EAAA,EAAMvB,MAAP,yBAAyBqB,EAAzB,SAEF,eAACE,EAAA,EAAMxB,KAAP,WACE,cAAC,WAAD,CACE6B,KAAM,CACJ,CACEC,MAAO,UACPC,MAAOT,EACPU,MAAO,WAET,CACEF,MAAO,YACPC,MAAOR,EACPS,MAAO,cAIb,qBAAKd,UAAU,oBAAf,SACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,iBAAf,SAAiCC,IACjC,qBAAKD,UAAU,mBAAf,SAAmCE,YAIzC,cAACI,EAAA,EAAMS,OAAP,UACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUtB,QAASQ,EAAnC,8BC7BJe,EAAeC,EAAQ,IAoHZC,MAlHf,WAAgB,IAAD,EACuCC,mBAAS,IADhD,mBACRC,EADQ,KACaC,EADb,OAEaF,mBAAS,IAA9BG,EAFQ,sBAGWH,mBAAS,GAA5BI,EAHQ,sBAImDJ,mBAAS,GAJ5D,mBAIRK,EAJQ,KAImBC,EAJnB,OAK6CN,mBAAS,GALtD,mBAKRO,EALQ,KAKgBC,EALhB,KA2Eb,OApEAC,qBAAU,YAIV,WACE,IAAMC,EAAgB,IAAIC,aAAW,CACnCC,iBAAkB,CAChBC,IAAK,GACLC,IAAK,KAGHC,EAAc,IAAIJ,aAAW,CACjCC,iBAAkB,CAChBC,IAAK,EACLC,IAAK,KAILE,EAA+B,YAAIC,MAAMd,IAAoBrC,KAC/D,SAACR,EAAU4D,GACT,IAAIC,EAAoB,CACtBjD,IAAKgD,EACLvD,KAAM+C,EAAcU,kBAAkB,GAAGC,MAAM,GAAI,GAAK,IACxD7C,WAAYqB,EAAa,CACvBiB,IAAK,EACLD,IAAK,EACLS,SAAS,IAEXnD,eAAgB,IAGdoD,EAAmB,YAAIN,MAAMb,IAAkBtC,KACjD,SAACC,EAAQyD,GAKP,MAJsB,CACpBtD,IAAKsD,EAAc,EACnB7D,KAAMoD,EAAYK,kBAAkB,OAK1C,OAAO,2BACFD,GADL,IAEEtD,QAAS0D,OAKfrB,EAAuBc,GA9CvBS,KACC,IAmED,sBAAK9C,UAAU,MAAf,UACG0B,IAA8BF,EAC7B,cAACuB,EAAD,CACE9C,QAAS2B,EACT1B,UAAWsB,EAAoBI,EAC/BzB,UAVR,WACE6C,OAAOC,SAASC,YAWV,KACJ,eAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAI,QAASC,MAAO,MAAzD,UACE,cAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,QAAnB,4BACA,cAACC,EAAA,EAAD,CAAK1D,UAAU,YACf,cAAC0D,EAAA,EAAD,UACE,eAACA,EAAA,EAAIC,KAAL,CAAUF,KAAK,SAASzD,UAAU,SAAlC,UACG0B,EADH,IAC+BF,UAKnC,eAACoC,EAAA,EAAD,WACE,mBAAG5D,UAAU,OAAb,kKAKCsB,EAAoBnC,KAAI,SAACR,GACxB,OACE,cAAC,EAAD,CACEA,SAAUA,EACVC,YAAa,SAACiF,EAAYC,GAAb,OA/CzB,SAAqBD,EAAYC,GAC/B,IAAIC,EAA4BzC,EAAoBnC,KAAI,SAACR,GAQvD,OAPIA,EAASY,MAAQsE,IACnBlF,EAASa,eAAiBsE,EAC1BnC,EAA6BD,EAA4B,GACrD/C,EAASa,iBAAmBb,EAASkB,YACvCgC,EAA0BD,EAAyB,IAGhDjD,KAET4C,EAAuBwC,GAqCXnF,CAAYiF,EAAYC,gBCvGzBE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7b6ebe9b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, ListGroup } from \"react-bootstrap\";\n\nfunction Question(props) {\n  let { question, checkOption } = props;\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>{question.name}</Card.Title>\n        <ListGroup>\n          {question.options.map((option) => {\n            console.log(option._id, question.selectedOption);\n            return (\n              <ListGroup.Item\n                disabled={question.selectedOption ? true : null}\n                onClick={() => checkOption(question._id, option._id)}\n                style={\n                  question.selectedOption === question.trueOption &&\n                  option._id === question.selectedOption\n                    ? { border: \"2px solid #38bb38\", borderRadius: \".3rem\" }\n                    : question.selectedOption !== question.trueOption &&\n                      option._id === question.selectedOption\n                    ? { border: \"2px solid #e24646\", borderRadius: \".3rem\" }\n                    : null\n                }\n              >\n                <div className=\"number\">{option._id}</div>\n                <div>{option.name}</div>\n              </ListGroup.Item>\n            );\n          })}\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n}\nexport default Question;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { PieChart } from \"react-minimal-pie-chart\";\n\nfunction Question(props) {\n  let { correct, incorrect, testAgain } = props;\n  let correctPercentage = (correct / 10) * 100;\n  let incorrectPercentage = 100 - correctPercentage;\n\n  return (\n    <Modal show={true} onHide={testAgain} animation={false}>\n      <Modal.Header>\n        <Modal.Title>Your luck: {correctPercentage}%</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <PieChart\n          data={[\n            {\n              title: \"Correct\",\n              value: correctPercentage,\n              color: \"#38bb38\",\n            },\n            {\n              title: \"Incorrect\",\n              value: incorrectPercentage,\n              color: \"#e24646\",\n            },\n          ]}\n        />\n        <div className=\"numbers-container\">\n          <div className=\"numbers\">\n            <div className=\"number correct\">{correct}</div>\n            <div className=\"number incorrect\">{incorrect}</div>\n          </div>\n        </div>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={testAgain}>\n          Test again\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\nexport default Question;\n","import React, { useEffect, useState } from \"react\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\nimport Question from \"./components/Question\";\nimport \"./assets/scss/styles.scss\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { LoremIpsum } from \"lorem-ipsum\";\nimport ResultModal from \"./components/ResultModal\";\n\nvar randomNumber = require(\"random-number\");\n\nfunction App() {\n  let [questionsAndOptions, setQuestionsAndOptions] = useState([]);\n  let [numberOfQuestions] = useState(10);\n  let [numberOfOptions] = useState(4);\n  let [numberOfAnsweredQuestions, setNumberOfAnsweredQuestions] = useState(0);\n  let [numberOfCorrectAnswers, setNumberOfCorrectAnswers] = useState(0);\n\n  useEffect(() => {\n    createQuestionAndOptions();\n  }, []);\n\n  function createQuestionAndOptions() {\n    const questionLorem = new LoremIpsum({\n      wordsPerSentence: {\n        max: 16,\n        min: 4,\n      },\n    });\n    const optionLorem = new LoremIpsum({\n      wordsPerSentence: {\n        max: 3,\n        min: 1,\n      },\n    });\n\n    let questionsAndOptionsGenerated = [...Array(numberOfQuestions)].map(\n      (question, questionIndex) => {\n        let questionGenerated = {\n          _id: questionIndex,\n          name: questionLorem.generateSentences(1).slice(0, -1) + \"?\",\n          trueOption: randomNumber({\n            min: 1,\n            max: 4,\n            integer: true,\n          }),\n          selectedOption: \"\",\n        };\n\n        let optionsGenerated = [...Array(numberOfOptions)].map(\n          (option, optionIndex) => {\n            let optionGenerated = {\n              _id: optionIndex + 1,\n              name: optionLorem.generateSentences(1),\n            };\n            return optionGenerated;\n          }\n        );\n        return {\n          ...questionGenerated,\n          options: optionsGenerated,\n        };\n      }\n    );\n\n    setQuestionsAndOptions(questionsAndOptionsGenerated);\n  }\n\n  function checkOption(questionId, optionId) {\n    let updatedQuestionAndOptions = questionsAndOptions.map((question) => {\n      if (question._id === questionId) {\n        question.selectedOption = optionId;\n        setNumberOfAnsweredQuestions(numberOfAnsweredQuestions + 1);\n        if (question.selectedOption === question.trueOption) {\n          setNumberOfCorrectAnswers(numberOfCorrectAnswers + 1);\n        }\n      }\n      return question;\n    });\n    setQuestionsAndOptions(updatedQuestionAndOptions);\n  }\n\n  function testAgain() {\n    window.location.reload();\n  }\n\n  return (\n    <div className=\"app\">\n      {numberOfAnsweredQuestions === numberOfQuestions ? (\n        <ResultModal\n          correct={numberOfCorrectAnswers}\n          incorrect={numberOfQuestions - numberOfCorrectAnswers}\n          testAgain={testAgain}\n        />\n      ) : null}\n      <Navbar collapseOnSelect expand=\"lg\" bg={\"light\"} fixed={\"top\"}>\n        <Navbar.Brand href=\"#home\">Test your luck</Navbar.Brand>\n        <Nav className=\"mr-auto\"></Nav>\n        <Nav>\n          <Nav.Link href=\"#deets\" className=\"number\">\n            {numberOfAnsweredQuestions}/{numberOfQuestions}\n          </Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <Container>\n        <p className=\"rule\">\n          Here are some meaningless questions and options. In each question, one\n          option is correct. So, answer the 10 questions and find your luck\n          percentage.\n        </p>\n        {questionsAndOptions.map((question) => {\n          return (\n            <Question\n              question={question}\n              checkOption={(questionId, optionId) =>\n                checkOption(questionId, optionId)\n              }\n            />\n          );\n        })}\n      </Container>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}